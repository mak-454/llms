"""DKube Wrapper for self hosted LLMs"""
from typing import Any, Dict, List, Mapping, Optional

from pydantic import BaseModel, Extra, root_validator

from langchain.llms.base import LLM
from langchain.llms.utils import enforce_stop_tokens
from langchain.utils import get_from_dict_or_env

import requests
import json

DEFAULT_REPO_ID = None
VALID_TASKS = ("text2text-generation", "text-generation")


class HuggingFaceHub(LLM, BaseModel):
    """Wrapper around HuggingFaceHub  models hosted by Dkube.

    Only supports `text-generation` and `text2text-generation` for now.

    Example:
        .. code-block:: python

            from langchain.llms.dkubeapi import HuggingFaceHub
            hf = HuggingFaceHub(repo_id="gpt2", dkubeai_ep="http://127.0.0.1:80000", dkubeai_api_token="my-api-key")
    """

    client: Any  #: :meta private:
    repo_id: str = DEFAULT_REPO_ID
    """Model name to use."""
    dkubeai_ep: str = "http://127.0.0.1:8000"
    """URL to self hosted models platform"""
    task: Optional[str] = None
    """Task to call the model with. Should be a task that returns `generated_text`."""
    model_kwargs: Optional[dict] = {}
    """Key word arguments to pass to the model."""
    temperature: float = 0.7
    """What sampling temperature to use"""

    max_tokens: int = 256
    """The maximum number of tokens to generate in the completion.
    -1 returns as many tokens as possible given the prompt and
    the models maximal context size."""

    dkubeai_api_token: Optional[str] = None

    class Config:
        """Configuration for this pydantic object."""

        extra = Extra.forbid

    @root_validator()
    def validate_environment(cls, values: Dict) -> Dict:
        """Validate that api key and python package exists in environment."""
        dkubeai_api_token = get_from_dict_or_env(
            values, "dkubeai_api_token", "DKUBEAI_API_TOKEN"
        )

        dkubeai_ep = get_from_dict_or_env(
                values, "dkubeai_ep", "DKUBEAI_ENDPOINT"
        )

        #Connect to validate if the endpoint is valid
        #fetch the list of hosted models and their prefixes
        repo_id = values["repo_id"]
        client = {}
        if repo_id == None:
            raise ValueError(
                    f"Repository id cannot be None,"
                    f"it should be one of hugging face repo id"
            )
        url = dkubeai_ep + "/llms"
        try:
            resp = requests.post(url, json=repo_id)
            scode = resp.status_code
            if scode == 200:
                probe = json.loads(resp.content)
                if probe["status"] == "deployed":
                    client["llm"] = repo_id
                    client["prefix"] = probe["prefix"]
                else:
                    raise ValueError(
                            f"LLM with repo_id {repo_id} is either"
                            f"Unhealthy or not deployed on dkubeai"
                    )
            else:
                raise ValueError(
                        f"Request to dkubeai endpoint failed with"
                        f"code {scode}"
                )
        except Exception as e:
            raise ValueError(
                    f"Probe request to dkubeai failed with exception {e}")

        values["client"] = client
        return values


    @property
    def _default_params(self) -> Dict[str, Any]:
        """Get the default parameters for calling DKubeAI API."""
        normal_params = {
            "temperature": self.temperature,
            "max_tokens": self.max_tokens,
            #"top_p": self.top_p,
            #"min_tokens": self.min_tokens,
            #"frequency_penalty": self.frequency_penalty,
            #"presence_penalty": self.presence_penalty,
            #"n": self.n,
            #"logit_bias": self.logit_bias,
        }
        return {**normal_params, **self.model_kwargs}


    @property
    def _identifying_params(self) -> Mapping[str, Any]:
        """Get the identifying parameters."""
        _model_kwargs = self.model_kwargs or {}
        return {
            **{"repo_id": self.repo_id, "task": self.task},
            **self._default_params
        }

    @property
    def _llm_type(self) -> str:
        """Return type of llm."""
        return "dkube_hf"

    def _call(self, prompt: str, stop: Optional[List[str]] = None) -> str:
        """Call out to HuggingFace Hub's inference endpoint.

        Args:
            prompt: The prompt to pass into the model.

        Returns:
            The string generated by the model.

        Example:
            .. code-block:: python

                response = hf("Tell me a joke.")
        """
        _model_kwargs = self.model_kwargs or {}
        params = self._default_params
        url = self.dkubeai_ep +  self.client["prefix"]
        data = {"prompt": prompt, "temperature": params['temperature'], "max_length": params["max_tokens"]}
        resp = requests.post(url, json=data)
        if resp.status_code == 200:
            answer = json.loads(resp.content)
        else:
            answer = f"dkubeai api {url} failed with {resp.status_code}"
        return answer
